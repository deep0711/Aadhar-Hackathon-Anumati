{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\PROJECTS\\\\Aadhar-Hackathon-Anumati\\\\Anumati-client\\\\node_modules\\\\react-native-smooth-pincode-input\\\\src\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport * as Animatable from 'react-native-animatable';\nvar styles = StyleSheet.create({\n  containerDefault: {},\n  cellDefault: {\n    borderColor: 'gray',\n    borderWidth: 1\n  },\n  cellFocusedDefault: {\n    borderColor: 'black',\n    borderWidth: 2\n  },\n  textStyleDefault: {\n    color: 'gray',\n    fontSize: 24\n  },\n  textStyleFocusedDefault: {\n    color: 'black'\n  }\n});\n\nvar SmoothPinCodeInput = function (_Component) {\n  _inherits(SmoothPinCodeInput, _Component);\n\n  var _super = _createSuper(SmoothPinCodeInput);\n\n  function SmoothPinCodeInput() {\n    var _this;\n\n    _classCallCheck(this, SmoothPinCodeInput);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      maskDelay: false,\n      focused: false\n    };\n    _this.ref = React.createRef();\n    _this.inputRef = React.createRef();\n\n    _this.animate = function (_ref) {\n      var _ref$animation = _ref.animation,\n          animation = _ref$animation === void 0 ? \"shake\" : _ref$animation,\n          _ref$duration = _ref.duration,\n          duration = _ref$duration === void 0 ? 650 : _ref$duration;\n\n      if (!_this.props.animated) {\n        return new Promise(function (resolve, reject) {\n          return reject(new Error(\"Animations are disabled\"));\n        });\n      }\n\n      return _this.ref.current[animation](duration);\n    };\n\n    _this.shake = function () {\n      return _this.animate({\n        animation: \"shake\"\n      });\n    };\n\n    _this.focus = function () {\n      return _this.inputRef.current.focus();\n    };\n\n    _this.blur = function () {\n      return _this.inputRef.current.blur();\n    };\n\n    _this.clear = function () {\n      return _this.inputRef.current.clear();\n    };\n\n    _this._inputCode = function (code) {\n      var _this$props = _this.props,\n          password = _this$props.password,\n          _this$props$codeLengt = _this$props.codeLength,\n          codeLength = _this$props$codeLengt === void 0 ? 4 : _this$props$codeLengt,\n          onTextChange = _this$props.onTextChange,\n          onFulfill = _this$props.onFulfill;\n\n      if (_this.props.restrictToNumbers) {\n        code = (code.match(/[0-9]/g) || []).join(\"\");\n      }\n\n      if (onTextChange) {\n        onTextChange(code);\n      }\n\n      if (code.length === codeLength && onFulfill) {\n        onFulfill(code);\n      }\n\n      var maskDelay = password && code.length > _this.props.value.length;\n\n      _this.setState({\n        maskDelay: maskDelay\n      });\n\n      if (maskDelay) {\n        clearTimeout(_this.maskTimeout);\n        _this.maskTimeout = setTimeout(function () {\n          _this.setState({\n            maskDelay: false\n          });\n        }, _this.props.maskDelay);\n      }\n    };\n\n    _this._keyPress = function (event) {\n      if (event.nativeEvent.key === 'Backspace') {\n        var _this$props2 = _this.props,\n            value = _this$props2.value,\n            onBackspace = _this$props2.onBackspace;\n\n        if (value === '' && onBackspace) {\n          onBackspace();\n        }\n      }\n    };\n\n    _this._onFocused = function () {\n      _this.setState({\n        focused: true\n      });\n\n      if (typeof _this.props.onFocus === 'function') {\n        _this.props.onFocus();\n      }\n    };\n\n    _this._onBlurred = function () {\n      _this.setState({\n        focused: false\n      });\n\n      if (typeof _this.props.onBlur === 'function') {\n        _this.props.onBlur();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(SmoothPinCodeInput, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this.maskTimeout);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          value = _this$props3.value,\n          codeLength = _this$props3.codeLength,\n          cellSize = _this$props3.cellSize,\n          cellSpacing = _this$props3.cellSpacing,\n          placeholder = _this$props3.placeholder,\n          password = _this$props3.password,\n          mask = _this$props3.mask,\n          autoFocus = _this$props3.autoFocus,\n          containerStyle = _this$props3.containerStyle,\n          cellStyle = _this$props3.cellStyle,\n          cellStyleFocused = _this$props3.cellStyleFocused,\n          cellStyleFilled = _this$props3.cellStyleFilled,\n          textStyle = _this$props3.textStyle,\n          textStyleFocused = _this$props3.textStyleFocused,\n          keyboardType = _this$props3.keyboardType,\n          animationFocused = _this$props3.animationFocused,\n          animated = _this$props3.animated,\n          testID = _this$props3.testID,\n          editable = _this$props3.editable,\n          inputProps = _this$props3.inputProps,\n          disableFullscreenUI = _this$props3.disableFullscreenUI;\n      var _this$state = this.state,\n          maskDelay = _this$state.maskDelay,\n          focused = _this$state.focused;\n      return React.createElement(Animatable.View, {\n        ref: this.ref,\n        style: [{\n          alignItems: 'stretch',\n          flexDirection: 'row',\n          justifyContent: 'center',\n          position: 'relative',\n          width: cellSize * codeLength + cellSpacing * (codeLength - 1),\n          height: cellSize\n        }, containerStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: {\n          position: 'absolute',\n          margin: 0,\n          height: '100%',\n          flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n          alignItems: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 9\n        }\n      }, Array.apply(null, Array(codeLength)).map(function (_, idx) {\n        var cellFocused = focused && idx === value.length;\n        var filled = idx < value.length;\n        var last = idx === value.length - 1;\n        var showMask = filled && password && (!maskDelay || !last);\n        var isPlaceholderText = typeof placeholder === 'string';\n        var isMaskText = typeof mask === 'string';\n        var pinCodeChar = value.charAt(idx);\n        var cellText = null;\n\n        if (filled || placeholder !== null) {\n          if (showMask && isMaskText) {\n            cellText = mask;\n          } else if (!filled && isPlaceholderText) {\n            cellText = placeholder;\n          } else if (pinCodeChar) {\n            cellText = pinCodeChar;\n          }\n        }\n\n        var placeholderComponent = !isPlaceholderText ? placeholder : null;\n        var maskComponent = showMask && !isMaskText ? mask : null;\n        var isCellText = typeof cellText === 'string';\n        return React.createElement(Animatable.View, {\n          key: idx,\n          style: [{\n            width: cellSize,\n            height: cellSize,\n            marginLeft: cellSpacing / 2,\n            marginRight: cellSpacing / 2,\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'center'\n          }, cellStyle, cellFocused ? cellStyleFocused : {}, filled ? cellStyleFilled : {}],\n          animation: idx === value.length && focused && animated ? animationFocused : null,\n          iterationCount: \"infinite\",\n          duration: 500,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 17\n          }\n        }, isCellText && !maskComponent && React.createElement(Text, {\n          style: [textStyle, cellFocused ? textStyleFocused : {}],\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 52\n          }\n        }, cellText), !isCellText && !maskComponent && placeholderComponent, isCellText && maskComponent);\n      })), React.createElement(TextInput, _extends({\n        disableFullscreenUI: disableFullscreenUI,\n        value: value,\n        ref: this.inputRef,\n        onChangeText: this._inputCode,\n        onKeyPress: this._keyPress,\n        onFocus: function onFocus() {\n          return _this2._onFocused();\n        },\n        onBlur: function onBlur() {\n          return _this2._onBlurred();\n        },\n        spellCheck: false,\n        autoFocus: autoFocus,\n        keyboardType: keyboardType,\n        numberOfLines: 1,\n        caretHidden: true,\n        maxLength: codeLength,\n        selection: {\n          start: value.length,\n          end: value.length\n        },\n        style: {\n          flex: 1,\n          opacity: 0,\n          textAlign: 'center'\n        },\n        testID: testID || undefined,\n        editable: editable\n      }, inputProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 9\n        }\n      })));\n    }\n  }]);\n\n  return SmoothPinCodeInput;\n}(Component);\n\nSmoothPinCodeInput.defaultProps = {\n  value: '',\n  codeLength: 4,\n  cellSize: 48,\n  cellSpacing: 4,\n  placeholder: '',\n  password: false,\n  mask: '*',\n  maskDelay: 200,\n  keyboardType: 'numeric',\n  autoFocus: false,\n  restrictToNumbers: false,\n  containerStyle: styles.containerDefault,\n  cellStyle: styles.cellDefault,\n  cellStyleFocused: styles.cellFocusedDefault,\n  textStyle: styles.textStyleDefault,\n  textStyleFocused: styles.textStyleFocusedDefault,\n  animationFocused: 'pulse',\n  animated: true,\n  editable: true,\n  inputProps: {},\n  disableFullscreenUI: true\n};\nSmoothPinCodeInput.propTypes = {\n  value: PropTypes.string,\n  codeLength: PropTypes.number,\n  cellSize: PropTypes.number,\n  cellSpacing: PropTypes.number,\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  mask: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  maskDelay: PropTypes.number,\n  password: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  restrictToNumbers: PropTypes.bool,\n  containerStyle: ViewPropTypes.style,\n  cellStyle: ViewPropTypes.style,\n  cellStyleFocused: ViewPropTypes.style,\n  cellStyleFilled: ViewPropTypes.style,\n  textStyle: Text.propTypes.style,\n  textStyleFocused: Text.propTypes.style,\n  animated: PropTypes.bool,\n  animationFocused: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  onFulfill: PropTypes.func,\n  onChangeText: PropTypes.func,\n  onBackspace: PropTypes.func,\n  onTextChange: PropTypes.func,\n  testID: PropTypes.any,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  keyboardType: PropTypes.string,\n  editable: PropTypes.bool,\n  inputProps: PropTypes.exact(TextInput.propTypes)\n};\nexport default SmoothPinCodeInput;","map":{"version":3,"sources":["D:/PROJECTS/Aadhar-Hackathon-Anumati/Anumati-client/node_modules/react-native-smooth-pincode-input/src/index.js"],"names":["React","Component","PropTypes","ViewPropTypes","Animatable","styles","StyleSheet","create","containerDefault","cellDefault","borderColor","borderWidth","cellFocusedDefault","textStyleDefault","color","fontSize","textStyleFocusedDefault","SmoothPinCodeInput","state","maskDelay","focused","ref","createRef","inputRef","animate","animation","duration","props","animated","Promise","resolve","reject","Error","current","shake","focus","blur","clear","_inputCode","code","password","codeLength","onTextChange","onFulfill","restrictToNumbers","match","join","length","value","setState","clearTimeout","maskTimeout","setTimeout","_keyPress","event","nativeEvent","key","onBackspace","_onFocused","onFocus","_onBlurred","onBlur","cellSize","cellSpacing","placeholder","mask","autoFocus","containerStyle","cellStyle","cellStyleFocused","cellStyleFilled","textStyle","textStyleFocused","keyboardType","animationFocused","testID","editable","inputProps","disableFullscreenUI","alignItems","flexDirection","justifyContent","position","width","height","margin","I18nManager","isRTL","Array","apply","map","_","idx","cellFocused","filled","last","showMask","isPlaceholderText","isMaskText","pinCodeChar","charAt","cellText","placeholderComponent","maskComponent","isCellText","marginLeft","marginRight","start","end","flex","opacity","textAlign","undefined","defaultProps","propTypes","string","number","oneOfType","element","bool","style","Text","object","func","onChangeText","any","exact","TextInput"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  View,\n  Text,\n  TextInput,\n  StyleSheet,\n  I18nManager,\n  ViewPropTypes,\n} from 'react-native';\nimport * as Animatable from 'react-native-animatable';\n\nconst styles = StyleSheet.create({\n  containerDefault: {},\n  cellDefault: {\n    borderColor: 'gray',\n    borderWidth: 1,\n  },\n  cellFocusedDefault: {\n    borderColor: 'black',\n    borderWidth: 2,\n  },\n  textStyleDefault: {\n    color: 'gray',\n    fontSize: 24,\n  },\n  textStyleFocusedDefault: {\n    color: 'black',\n  },\n});\n\nclass SmoothPinCodeInput extends Component {\n\n  state = {\n    maskDelay: false,\n    focused: false,\n  };\n  ref = React.createRef();\n  inputRef = React.createRef();\n\n  animate = ({ animation = \"shake\", duration = 650 }) => {\n    if (!this.props.animated) {\n      return new Promise((resolve, reject) => reject(new Error(\"Animations are disabled\")));\n    }\n    return this.ref.current[animation](duration);\n  };\n\n  shake = () => this.animate({animation: \"shake\"});\n\n  focus = () => {\n    return this.inputRef.current.focus();\n  };\n\n  blur = () => {\n    return this.inputRef.current.blur();\n  };\n\n  clear = () => {\n    return this.inputRef.current.clear();\n  };\n\n  _inputCode = (code) => {\n    const { password, codeLength = 4, onTextChange, onFulfill } = this.props;\n\n    if (this.props.restrictToNumbers) {\n      code = (code.match(/[0-9]/g) || []).join(\"\");\n    }\n\n    if (onTextChange) {\n      onTextChange(code);\n    }\n    if (code.length === codeLength && onFulfill) {\n      onFulfill(code);\n    }\n\n    // handle password mask\n    const maskDelay = password &&\n      code.length > this.props.value.length; // only when input new char\n    this.setState({ maskDelay });\n\n    if (maskDelay) { // mask password after delay\n      clearTimeout(this.maskTimeout);\n      this.maskTimeout = setTimeout(() => {\n          this.setState({ maskDelay: false });\n        },\n        this.props.maskDelay\n      );\n    }\n  };\n\n  _keyPress = (event) => {\n    if (event.nativeEvent.key === 'Backspace') {\n      const { value, onBackspace } = this.props;\n      if (value === '' && onBackspace) {\n        onBackspace();\n      }\n    }\n  };\n\n  _onFocused = () => {\n    this.setState({ focused: true });\n    if (typeof this.props.onFocus === 'function') {\n      this.props.onFocus();\n    }\n  };\n\n  _onBlurred = () => {\n    this.setState({ focused: false });\n    if (typeof this.props.onBlur === 'function') {\n      this.props.onBlur();\n    }\n  };\n\n  componentWillUnmount() {\n    clearTimeout(this.maskTimeout);\n  }\n\n  render() {\n    const {\n      value,\n      codeLength, cellSize, cellSpacing,\n      placeholder,\n      password,\n      mask,\n      autoFocus,\n      containerStyle,\n      cellStyle,\n      cellStyleFocused,\n      cellStyleFilled,\n      textStyle,\n      textStyleFocused,\n      keyboardType,\n      animationFocused,\n      animated,\n      testID,\n      editable,\n      inputProps,\n      disableFullscreenUI,\n    } = this.props;\n    const { maskDelay, focused } = this.state;\n    return (\n      <Animatable.View\n        ref={this.ref}\n        style={[{\n          alignItems: 'stretch', flexDirection: 'row', justifyContent: 'center', position: 'relative',\n          width: cellSize * codeLength + cellSpacing * (codeLength - 1),\n          height: cellSize,\n        },\n          containerStyle,\n        ]}>\n        <View style={{\n          position: 'absolute', margin: 0, height: '100%',\n          flexDirection: I18nManager.isRTL ? 'row-reverse': 'row',\n          alignItems: 'center',\n        }}>\n          {\n            Array.apply(null, Array(codeLength)).map((_, idx) => {\n              const cellFocused = focused && idx === value.length;\n              const filled = idx < value.length;\n              const last = (idx === value.length - 1);\n              const showMask = filled && (password && (!maskDelay || !last));\n              const isPlaceholderText = typeof placeholder === 'string';\n              const isMaskText = typeof mask === 'string';\n              const pinCodeChar = value.charAt(idx);\n\n              let cellText = null;\n              if (filled || placeholder !== null) {\n                if (showMask && isMaskText) {\n                  cellText = mask;\n                } else if(!filled && isPlaceholderText) {\n                  cellText = placeholder;\n                } else if (pinCodeChar) {\n                  cellText = pinCodeChar;\n                }\n              }\n\n              const placeholderComponent = !isPlaceholderText ? placeholder : null;\n              const maskComponent = (showMask && !isMaskText) ? mask : null;\n              const isCellText = typeof cellText === 'string';\n\n              return (\n                <Animatable.View\n                  key={idx}\n                  style={[\n                    {\n                      width: cellSize,\n                      height: cellSize,\n                      marginLeft: cellSpacing / 2,\n                      marginRight: cellSpacing / 2,\n                      flexDirection: 'row',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                    },\n                    cellStyle,\n                    cellFocused ? cellStyleFocused : {},\n                    filled ? cellStyleFilled : {},\n                  ]}\n                  animation={idx === value.length && focused && animated ? animationFocused : null}\n                  iterationCount=\"infinite\"\n                  duration={500}\n                >\n                  {isCellText && !maskComponent && <Text style={[textStyle, cellFocused ? textStyleFocused : {}]}>\n                    {cellText}\n                  </Text>}\n\n                  {(!isCellText && !maskComponent) && placeholderComponent}\n                  {isCellText && maskComponent}\n                </Animatable.View>\n              );\n            })\n          }\n        </View>\n        <TextInput\n          disableFullscreenUI={disableFullscreenUI}\n          value={value}\n          ref={this.inputRef}\n          onChangeText={this._inputCode}\n          onKeyPress={this._keyPress}\n          onFocus={() => this._onFocused()}\n          onBlur={() => this._onBlurred()}\n          spellCheck={false}\n          autoFocus={autoFocus}\n          keyboardType={keyboardType}\n          numberOfLines={1}\n          caretHidden\n          maxLength={codeLength}\n          selection={{\n            start: value.length,\n            end: value.length,\n          }}\n          style={{\n            flex: 1,\n            opacity: 0,\n            textAlign: 'center',\n          }}\n          testID={testID || undefined}\n          editable={editable}\n          {...inputProps} />\n      </Animatable.View>\n    );\n  }\n\n  static defaultProps = {\n    value: '',\n    codeLength: 4,\n    cellSize: 48,\n    cellSpacing: 4,\n    placeholder: '',\n    password: false,\n    mask: '*',\n    maskDelay: 200,\n    keyboardType: 'numeric',\n    autoFocus: false,\n    restrictToNumbers: false,\n    containerStyle: styles.containerDefault,\n    cellStyle: styles.cellDefault,\n    cellStyleFocused: styles.cellFocusedDefault,\n    textStyle: styles.textStyleDefault,\n    textStyleFocused: styles.textStyleFocusedDefault,\n    animationFocused: 'pulse',\n    animated: true,\n    editable: true,\n    inputProps: {},\n    disableFullscreenUI: true,\n  };\n}\n\nSmoothPinCodeInput.propTypes = {\n  value: PropTypes.string,\n  codeLength: PropTypes.number,\n  cellSize: PropTypes.number,\n  cellSpacing: PropTypes.number,\n\n  placeholder: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.element,\n  ]),\n  mask: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.element,\n  ]),\n  maskDelay: PropTypes.number,\n  password: PropTypes.bool,\n\n  autoFocus: PropTypes.bool,\n\n  restrictToNumbers: PropTypes.bool,\n\n  containerStyle: ViewPropTypes.style,\n\n  cellStyle: ViewPropTypes.style,\n  cellStyleFocused: ViewPropTypes.style,\n  cellStyleFilled: ViewPropTypes.style,\n\n  textStyle: Text.propTypes.style,\n  textStyleFocused: Text.propTypes.style,\n\n  animated: PropTypes.bool,\n  animationFocused: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n  ]),\n\n  onFulfill: PropTypes.func,\n  onChangeText: PropTypes.func,\n  onBackspace: PropTypes.func,\n  onTextChange: PropTypes.func,\n  testID: PropTypes.any,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  keyboardType: PropTypes.string,\n  editable: PropTypes.bool,\n  inputProps: PropTypes.exact(TextInput.propTypes),\n};\n\nexport default SmoothPinCodeInput;\n"]},"metadata":{},"sourceType":"module"}