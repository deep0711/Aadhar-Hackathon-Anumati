{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\PROJECTS\\\\Aadhar-Hackathon-Anumati\\\\Anumati-client\\\\src\\\\Components\\\\PinView.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport React, { useState } from 'react';\nimport Logo from \"../assets/Aadhar-Color.png\";\nimport { Button, CheckIcon, ChevronRightIcon } from 'native-base';\nimport { connect } from 'react-redux';\nimport { CodeField, Cursor, useBlurOnFulfill, useClearByFocusCell } from 'react-native-confirmation-code-field';\nimport styles, { ACTIVE_CELL_BG_COLOR, CELL_BORDER_RADIUS, CELL_SIZE, DEFAULT_CELL_BG_COLOR, NOT_EMPTY_CELL_BG_COLOR } from \"./styles\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar Value = Animated.Value,\n    AnimatedText = Animated.Text;\nvar CELL_COUNT = 4;\n\nvar animationsColor = _toConsumableArray(new Array(CELL_COUNT)).map(function () {\n  return new Value(0);\n});\n\nvar animationsScale = _toConsumableArray(new Array(CELL_COUNT)).map(function () {\n  return new Value(1);\n});\n\nvar animateCell = function animateCell(_ref) {\n  var hasValue = _ref.hasValue,\n      index = _ref.index,\n      isFocused = _ref.isFocused;\n  Animated.parallel([Animated.timing(animationsColor[index], {\n    useNativeDriver: false,\n    toValue: isFocused ? 1 : 0,\n    duration: 250\n  }), Animated.spring(animationsScale[index], {\n    useNativeDriver: false,\n    toValue: hasValue ? 0 : 1,\n    duration: hasValue ? 300 : 250\n  })]).start();\n};\n\nvar AnimatedExample = function AnimatedExample(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var ref = useBlurOnFulfill({\n    value: value,\n    cellCount: CELL_COUNT\n  });\n\n  var _useClearByFocusCell = useClearByFocusCell({\n    value: value,\n    setValue: setValue\n  }),\n      _useClearByFocusCell2 = _slicedToArray(_useClearByFocusCell, 2),\n      propsCode = _useClearByFocusCell2[0],\n      getCellOnLayoutHandler = _useClearByFocusCell2[1];\n\n  var renderCell = function renderCell(_ref2) {\n    var index = _ref2.index,\n        symbol = _ref2.symbol,\n        isFocused = _ref2.isFocused;\n    var hasValue = Boolean(symbol);\n    var animatedCellStyle = props.loginStatus ? {\n      backgroundColor: hasValue ? animationsScale[index].interpolate({\n        inputRange: [0, 1],\n        outputRange: [NOT_EMPTY_CELL_BG_COLOR, ACTIVE_CELL_BG_COLOR]\n      }) : animationsColor[index].interpolate({\n        inputRange: [0, 1],\n        outputRange: [DEFAULT_CELL_BG_COLOR, ACTIVE_CELL_BG_COLOR]\n      }),\n      borderRadius: animationsScale[index].interpolate({\n        inputRange: [0, 1],\n        outputRange: [CELL_SIZE, CELL_BORDER_RADIUS]\n      }),\n      transform: [{\n        scale: animationsScale[index].interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.2, 1]\n        })\n      }]\n    } : {\n      borderRadius: animationsScale[index].interpolate({\n        inputRange: [0, 1],\n        outputRange: [CELL_SIZE, CELL_BORDER_RADIUS]\n      })\n    };\n    setTimeout(function () {\n      animateCell({\n        hasValue: hasValue,\n        index: index,\n        isFocused: isFocused\n      });\n    }, 0);\n    return React.createElement(AnimatedText, {\n      key: index,\n      style: [styles.cell, animatedCellStyle],\n      onLayout: getCellOnLayoutHandler(index),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, symbol || (isFocused ? React.createElement(Cursor, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 33\n      }\n    }) : null));\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: styles.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, \" \", props.loginStatus ? \"Lock Screen\" : \"Set Up Your Secure Pin\", \" \"), React.createElement(Image, {\n    style: styles.icon,\n    source: Logo,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    style: styles.subTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, \" \", props.loginStatus ? \"Enter Your Secure Pin\" : \"Pin will be used to Further Login's\", \" \"), React.createElement(CodeField, _extends({\n    ref: ref\n  }, propsCode, {\n    value: value,\n    onChangeText: setValue,\n    cellCount: CELL_COUNT,\n    rootStyle: styles.codeFiledRoot,\n    keyboardType: \"number-pad\",\n    textContentType: \"oneTimeCode\",\n    renderCell: renderCell,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  })), props.loginStatus ? React.createElement(Button, {\n    size: \"sm\",\n    variant: \"subtle\",\n    colorScheme: \"primary\",\n    style: styles.nextButton,\n    rightIcon: React.createElement(ChevronRightIcon, {\n      size: \"7\",\n      mt: \"0.5\",\n      color: \"emerald.500\",\n      style: {\n        justifyContent: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 29\n      }\n    }),\n    onPress: function onPress() {\n      if (value === props.storedMPin) {\n        props.navigation.reset({\n          index: 0,\n          routes: [{\n            name: 'TabNav'\n          }]\n        });\n      } else {\n        console.log(props.storedMPin);\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, \"UNLOCK SCREEN\") : React.createElement(Button, {\n    size: \"sm\",\n    variant: \"subtle\",\n    colorScheme: \"primary\",\n    style: styles.nextButton,\n    leftIcon: React.createElement(CheckIcon, {\n      size: \"5\",\n      mt: \"0.5\",\n      color: \"emerald.500\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 28\n      }\n    }),\n    onPress: function onPress() {\n      props.onCreatePin(value);\n      props.navigation.reset({\n        index: 0,\n        routes: [{\n          name: 'TabNav'\n        }]\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }, \"CREATE PIN\"));\n};\n\nvar mapStatetoProps = function mapStatetoProps(state) {\n  return {\n    storedMPin: state.userReducer.mPin\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onCreatePin: function onCreatePin(pinCode) {\n      return _regeneratorRuntime.async(function onCreatePin$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem('mPin', pinCode));\n\n            case 2:\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem('userToken', '#f7j38df'));\n\n            case 4:\n              dispatch({\n                type: 'CREATE_PIN',\n                pin: pinCode\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  };\n};\n\nexport default connect(mapStatetoProps, mapDispatchToProps)(AnimatedExample);","map":{"version":3,"sources":["D:/PROJECTS/Aadhar-Hackathon-Anumati/Anumati-client/src/Components/PinView.js"],"names":["React","useState","Logo","Button","CheckIcon","ChevronRightIcon","connect","CodeField","Cursor","useBlurOnFulfill","useClearByFocusCell","styles","ACTIVE_CELL_BG_COLOR","CELL_BORDER_RADIUS","CELL_SIZE","DEFAULT_CELL_BG_COLOR","NOT_EMPTY_CELL_BG_COLOR","AsyncStorage","Value","Animated","AnimatedText","Text","CELL_COUNT","animationsColor","Array","map","animationsScale","animateCell","hasValue","index","isFocused","parallel","timing","useNativeDriver","toValue","duration","spring","start","AnimatedExample","props","value","setValue","ref","cellCount","propsCode","getCellOnLayoutHandler","renderCell","symbol","Boolean","animatedCellStyle","loginStatus","backgroundColor","interpolate","inputRange","outputRange","borderRadius","transform","scale","setTimeout","cell","root","title","icon","subTitle","codeFiledRoot","nextButton","justifyContent","storedMPin","navigation","reset","routes","name","console","log","onCreatePin","mapStatetoProps","state","userReducer","mPin","mapDispatchToProps","dispatch","pinCode","setItem","type","pin"],"mappings":"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","sourcesContent":["import {Animated, Image, SafeAreaView, Text } from 'react-native';\r\nimport React, {useState} from 'react';\r\nimport Logo from '../assets/Aadhar-Color.png';\r\n\r\nimport { Button , CheckIcon , ChevronRightIcon} from 'native-base';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n  CodeField,\r\n  Cursor,\r\n  useBlurOnFulfill,\r\n  useClearByFocusCell,\r\n} from 'react-native-confirmation-code-field';\r\n\r\nimport styles, {\r\n  ACTIVE_CELL_BG_COLOR,\r\n  CELL_BORDER_RADIUS,\r\n  CELL_SIZE,\r\n  DEFAULT_CELL_BG_COLOR,\r\n  NOT_EMPTY_CELL_BG_COLOR,\r\n} from './styles';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst {Value, Text: AnimatedText} = Animated;\r\n\r\nconst CELL_COUNT = 4;\r\n\r\nconst animationsColor = [...new Array(CELL_COUNT)].map(() => new Value(0));\r\nconst animationsScale = [...new Array(CELL_COUNT)].map(() => new Value(1));\r\nconst animateCell = ({hasValue, index, isFocused}) => {\r\n  Animated.parallel([\r\n    Animated.timing(animationsColor[index], {\r\n      useNativeDriver: false,\r\n      toValue: isFocused ? 1 : 0,\r\n      duration: 250,\r\n    }),\r\n    Animated.spring(animationsScale[index], {\r\n      useNativeDriver: false,\r\n      toValue: hasValue ? 0 : 1,\r\n      duration: hasValue ? 300 : 250,\r\n    }),\r\n  ]).start();\r\n};\r\n\r\nconst AnimatedExample = ( props ) => {\r\n    const [value, setValue] = useState('');\r\n    const ref = useBlurOnFulfill({value, cellCount: CELL_COUNT});\r\n    const [propsCode, getCellOnLayoutHandler] = useClearByFocusCell({\r\n      value,\r\n      setValue,\r\n    });\r\n\r\n    const renderCell = ({index, symbol, isFocused}) => {\r\n      const hasValue = Boolean(symbol);\r\n      const animatedCellStyle = props.loginStatus ? {\r\n        backgroundColor: hasValue\r\n          ? animationsScale[index].interpolate({\r\n            inputRange: [0, 1],\r\n            outputRange: [NOT_EMPTY_CELL_BG_COLOR, ACTIVE_CELL_BG_COLOR],\r\n          })\r\n        : animationsColor[index].interpolate({\r\n            inputRange: [0, 1],\r\n            outputRange: [DEFAULT_CELL_BG_COLOR, ACTIVE_CELL_BG_COLOR],\r\n        }),\r\n        borderRadius: animationsScale[index].interpolate({\r\n          inputRange: [0, 1],\r\n          outputRange: [CELL_SIZE, CELL_BORDER_RADIUS],\r\n        }),\r\n        transform: [\r\n        {\r\n          scale: animationsScale[index].interpolate({\r\n            inputRange: [0, 1],\r\n            outputRange: [0.2, 1],\r\n          }),\r\n        },\r\n      ],\r\n    }: {\r\n      borderRadius: animationsScale[index].interpolate({\r\n        inputRange: [0, 1],\r\n        outputRange: [CELL_SIZE, CELL_BORDER_RADIUS],\r\n      }),\r\n    };\r\n    setTimeout(() => {\r\n      animateCell({hasValue, index, isFocused});\r\n    }, 0);\r\n\r\n    return (\r\n      <AnimatedText\r\n        key={index}\r\n        style={[styles.cell, animatedCellStyle]}\r\n        onLayout={getCellOnLayoutHandler(index)}>\r\n        {symbol || (isFocused ? <Cursor /> : null)}\r\n      </AnimatedText>\r\n    );\r\n  };\r\n\r\n\r\n  return (\r\n    <SafeAreaView style={styles.root}>\r\n        <Text style={styles.title}> {props.loginStatus ? \"Lock Screen\" : \"Set Up Your Secure Pin\"} </Text> \r\n        <Image style={styles.icon} source={Logo} />\r\n        <Text style={styles.subTitle}> { props.loginStatus ? \"Enter Your Secure Pin\" : \"Pin will be used to Further Login's\"} </Text> \r\n\r\n        <CodeField\r\n          ref={ref}\r\n          {...propsCode}\r\n          value={value}\r\n          onChangeText={setValue}\r\n          cellCount={CELL_COUNT}\r\n          rootStyle={styles.codeFiledRoot}\r\n          keyboardType=\"number-pad\"\r\n          textContentType=\"oneTimeCode\"\r\n          renderCell={renderCell}\r\n        />\r\n        {\r\n            props.loginStatus ?\r\n            <Button\r\n              size=\"sm\"\r\n              variant=\"subtle\"\r\n              colorScheme=\"primary\"\r\n              style={styles.nextButton}\r\n              rightIcon = { <ChevronRightIcon size=\"7\" mt=\"0.5\" color=\"emerald.500\" style={{ justifyContent: 'center'}}/> }\r\n              onPress={() => {\r\n                if(value === props.storedMPin) {\r\n                  props.navigation.reset({\r\n                    index: 0,\r\n                    routes: [{ name: 'TabNav'}]\r\n                  });\r\n                } else {\r\n                  console.log(props.storedMPin);\r\n                }\r\n              }}\r\n            > \r\n              UNLOCK SCREEN\r\n            </Button>\r\n            :\r\n            <Button\r\n              size=\"sm\"\r\n              variant=\"subtle\"\r\n              colorScheme=\"primary\"\r\n              style={styles.nextButton}\r\n              leftIcon = { <CheckIcon size=\"5\" mt=\"0.5\" color=\"emerald.500\" /> }\r\n              onPress={() => {\r\n                props.onCreatePin(value);\r\n                props.navigation.reset({\r\n                  index: 0,\r\n                  routes: [{ name: 'TabNav'}]\r\n                });\r\n              }}\r\n            > \r\n              CREATE PIN\r\n            </Button>\r\n        }\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\n\r\nconst mapStatetoProps = ( state ) => {\r\n  return {\r\n    storedMPin: state.userReducer.mPin,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = ( dispatch ) => {\r\n  return {\r\n    onCreatePin: async (pinCode) => { \r\n      await AsyncStorage.setItem('mPin' , pinCode);\r\n      await AsyncStorage.setItem('userToken' , '#f7j38df');\r\n      dispatch({ type: 'CREATE_PIN' , pin: pinCode});\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStatetoProps , mapDispatchToProps)(AnimatedExample);\r\n"]},"metadata":{},"sourceType":"module"}