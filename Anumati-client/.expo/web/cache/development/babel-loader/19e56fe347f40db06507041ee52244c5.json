{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\PROJECTS\\\\Aadhar-Hackathon-Anumati\\\\Anumati-client\\\\src\\\\Components\\\\PinView.js\";\n\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useState } from 'react';\nimport Logo from \"../assets/Aadhar-Color.png\";\nimport { Button } from 'native-base';\nimport { CodeField, Cursor, useBlurOnFulfill, useClearByFocusCell } from 'react-native-confirmation-code-field';\nimport styles, { ACTIVE_CELL_BG_COLOR, CELL_BORDER_RADIUS, CELL_SIZE, DEFAULT_CELL_BG_COLOR, NOT_EMPTY_CELL_BG_COLOR } from \"./styles\";\nvar Value = Animated.Value,\n    AnimatedText = Animated.Text;\nvar CELL_COUNT = 4;\n\nvar animationsColor = _toConsumableArray(new Array(CELL_COUNT)).map(function () {\n  return new Value(0);\n});\n\nvar animationsScale = _toConsumableArray(new Array(CELL_COUNT)).map(function () {\n  return new Value(1);\n});\n\nvar animateCell = function animateCell(_ref) {\n  var hasValue = _ref.hasValue,\n      index = _ref.index,\n      isFocused = _ref.isFocused;\n  Animated.parallel([Animated.timing(animationsColor[index], {\n    useNativeDriver: false,\n    toValue: isFocused ? 1 : 0,\n    duration: 250\n  }), Animated.spring(animationsScale[index], {\n    useNativeDriver: false,\n    toValue: hasValue ? 0 : 1,\n    duration: hasValue ? 300 : 250\n  })]).start();\n};\n\nvar AnimatedExample = function AnimatedExample() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var ref = useBlurOnFulfill({\n    value: value,\n    cellCount: CELL_COUNT\n  });\n\n  var _useClearByFocusCell = useClearByFocusCell({\n    value: value,\n    setValue: setValue\n  }),\n      _useClearByFocusCell2 = _slicedToArray(_useClearByFocusCell, 2),\n      props = _useClearByFocusCell2[0],\n      getCellOnLayoutHandler = _useClearByFocusCell2[1];\n\n  var renderCell = function renderCell(_ref2) {\n    var index = _ref2.index,\n        symbol = _ref2.symbol,\n        isFocused = _ref2.isFocused;\n    var hasValue = Boolean(symbol);\n    setTimeout(function () {\n      animateCell({\n        hasValue: hasValue,\n        index: index,\n        isFocused: isFocused\n      });\n    }, 0);\n    return React.createElement(AnimatedText, {\n      key: index,\n      style: [styles.cell, animatedCellStyle],\n      onLayout: getCellOnLayoutHandler(index),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, symbol || (isFocused ? React.createElement(Cursor, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 33\n      }\n    }) : null));\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: styles.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, \"Set Up Your Secure Pin\"), React.createElement(Image, {\n    style: styles.icon,\n    source: Logo,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    style: styles.subTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, \"Please enter the verification code\", '\\n', \"we send to your email address\"), React.createElement(CodeField, _extends({\n    ref: ref\n  }, props, {\n    value: value,\n    onChangeText: setValue,\n    cellCount: CELL_COUNT,\n    rootStyle: styles.codeFiledRoot,\n    keyboardType: \"number-pad\",\n    textContentType: \"oneTimeCode\",\n    renderCell: renderCell,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  })), React.createElement(Button, {\n    size: \"sm\",\n    variant: \"subtle\",\n    colorScheme: \"primary\",\n    style: styles.nextButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, \"CREATE PIN\"));\n};\n\nexport default AnimatedExample;","map":{"version":3,"sources":["D:/PROJECTS/Aadhar-Hackathon-Anumati/Anumati-client/src/Components/PinView.js"],"names":["React","useState","Logo","Button","CodeField","Cursor","useBlurOnFulfill","useClearByFocusCell","styles","ACTIVE_CELL_BG_COLOR","CELL_BORDER_RADIUS","CELL_SIZE","DEFAULT_CELL_BG_COLOR","NOT_EMPTY_CELL_BG_COLOR","Value","Animated","AnimatedText","Text","CELL_COUNT","animationsColor","Array","map","animationsScale","animateCell","hasValue","index","isFocused","parallel","timing","useNativeDriver","toValue","duration","spring","start","AnimatedExample","value","setValue","ref","cellCount","props","getCellOnLayoutHandler","renderCell","symbol","Boolean","setTimeout","cell","animatedCellStyle","root","title","icon","subTitle","codeFiledRoot","nextButton"],"mappings":"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","sourcesContent":["/*\r\n\r\nConcept: https://dribbble.com/shots/5476562-Forgot-Password-Verification/attachments\r\n\r\n*/\r\nimport {Animated, Image, SafeAreaView, Text, View} from 'react-native';\r\nimport React, {useState} from 'react';\r\nimport Logo from '../assets/Aadhar-Color.png';\r\n\r\nimport { Button } from 'native-base';\r\n\r\nimport {\r\n  CodeField,\r\n  Cursor,\r\n  useBlurOnFulfill,\r\n  useClearByFocusCell,\r\n} from 'react-native-confirmation-code-field';\r\n\r\nimport styles, {\r\n  ACTIVE_CELL_BG_COLOR,\r\n  CELL_BORDER_RADIUS,\r\n  CELL_SIZE,\r\n  DEFAULT_CELL_BG_COLOR,\r\n  NOT_EMPTY_CELL_BG_COLOR,\r\n} from './styles';\r\n\r\nconst {Value, Text: AnimatedText} = Animated;\r\n\r\nconst CELL_COUNT = 4;\r\n\r\nconst animationsColor = [...new Array(CELL_COUNT)].map(() => new Value(0));\r\nconst animationsScale = [...new Array(CELL_COUNT)].map(() => new Value(1));\r\nconst animateCell = ({hasValue, index, isFocused}) => {\r\n  Animated.parallel([\r\n    Animated.timing(animationsColor[index], {\r\n      useNativeDriver: false,\r\n      toValue: isFocused ? 1 : 0,\r\n      duration: 250,\r\n    }),\r\n    Animated.spring(animationsScale[index], {\r\n      useNativeDriver: false,\r\n      toValue: hasValue ? 0 : 1,\r\n      duration: hasValue ? 300 : 250,\r\n    }),\r\n  ]).start();\r\n};\r\n\r\nconst AnimatedExample = () => {\r\n  const [value, setValue] = useState('');\r\n  const ref = useBlurOnFulfill({value, cellCount: CELL_COUNT});\r\n  const [props, getCellOnLayoutHandler] = useClearByFocusCell({\r\n    value,\r\n    setValue,\r\n  });\r\n\r\n  const renderCell = ({index, symbol, isFocused}) => {\r\n    const hasValue = Boolean(symbol);\r\n    // const animatedCellStyle = {\r\n    //   backgroundColor: hasValue\r\n    //     ? animationsScale[index].interpolate({\r\n    //         inputRange: [0, 1],\r\n    //         outputRange: [NOT_EMPTY_CELL_BG_COLOR, ACTIVE_CELL_BG_COLOR],\r\n    //       })\r\n    //     : animationsColor[index].interpolate({\r\n    //         inputRange: [0, 1],\r\n    //         outputRange: [DEFAULT_CELL_BG_COLOR, ACTIVE_CELL_BG_COLOR],\r\n    //       }),\r\n    //   borderRadius: animationsScale[index].interpolate({\r\n    //     inputRange: [0, 1],\r\n    //     outputRange: [CELL_SIZE, CELL_BORDER_RADIUS],\r\n    //   }),\r\n    //   transform: [\r\n    //     {\r\n    //       scale: animationsScale[index].interpolate({\r\n    //         inputRange: [0, 1],\r\n    //         outputRange: [0.2, 1],\r\n    //       }),\r\n    //     },\r\n    //   ],\r\n    // };\r\n    setTimeout(() => {\r\n      animateCell({hasValue, index, isFocused});\r\n    }, 0);\r\n\r\n    return (\r\n      <AnimatedText\r\n        key={index}\r\n        style={[styles.cell, animatedCellStyle]}\r\n        onLayout={getCellOnLayoutHandler(index)}>\r\n        {symbol || (isFocused ? <Cursor /> : null)}\r\n      </AnimatedText>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <SafeAreaView style={styles.root}>\r\n      <Text style={styles.title}>Set Up Your Secure Pin</Text>\r\n      <Image style={styles.icon} source={Logo} />\r\n      <Text style={styles.subTitle}>\r\n        Please enter the verification code{'\\n'}\r\n        we send to your email address\r\n      </Text>\r\n\r\n      <CodeField\r\n        ref={ref}\r\n        {...props}\r\n        value={value}\r\n        onChangeText={setValue}\r\n        cellCount={CELL_COUNT}\r\n        rootStyle={styles.codeFiledRoot}\r\n        keyboardType=\"number-pad\"\r\n        textContentType=\"oneTimeCode\"\r\n        renderCell={renderCell}\r\n      />\r\n      <Button\r\n            size=\"sm\"\r\n            variant=\"subtle\"\r\n            colorScheme=\"primary\"\r\n            style={styles.nextButton}\r\n          >\r\n            CREATE PIN\r\n          </Button>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default AnimatedExample;\r\n"]},"metadata":{},"sourceType":"module"}