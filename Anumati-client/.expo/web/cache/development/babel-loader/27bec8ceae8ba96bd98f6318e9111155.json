{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\PROJECTS\\\\Aadhar-Hackathon-Anumati\\\\Anumati-client\\\\node_modules\\\\react-native-keycode\\\\index.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport PropTypes from 'prop-types';\nexport var KeycodeInput = function KeycodeInput(props) {\n  var _useState = useState(props.defaultValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  useEffect(function () {\n    if (props.value !== undefined && props.value !== inputValue) {\n      setInputValue(props.value);\n    }\n  }, [props.value]);\n\n  if (props.value !== undefined && !props.onChange) {\n    throw new Error('To use the KeycodeInput as a controlled component, ' + 'you need to supply both the value and onChange props.');\n  }\n\n  var changeText = function changeText(value) {\n    if (props.uppercase) {\n      value = value.toUpperCase();\n    }\n\n    if (props.alphaNumeric) {\n      value = value.replace('/[^a-z0-9]/i', '');\n    }\n\n    setInputValue(value);\n\n    if (props.onChange) {\n      props.onChange(value);\n    }\n\n    if (value.length < props.length) {\n      return;\n    }\n\n    if (props.onComplete) {\n      props.onComplete(value);\n    }\n  };\n\n  var renderBoxes = function renderBoxes() {\n    var elements = [];\n    var i = 0;\n    var vals = inputValue.split('');\n\n    while (i < props.length) {\n      var active = i === inputValue.length;\n      var barStyles = [styles.bar, active ? [styles.barActive, {\n        backgroundColor: props.tintColor\n      }] : []];\n      elements.push(React.createElement(View, {\n        style: styles.box,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: styles.text,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }\n      }, vals[i] || ''), React.createElement(View, {\n        style: barStyles,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }\n      })));\n      i++;\n    }\n\n    return elements;\n  };\n\n  var keyboardType = props.numeric ? 'numeric' : Platform.OS === 'ios' ? 'ascii-capable' : 'default';\n  return React.createElement(View, {\n    style: [styles.container, props.style],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, renderBoxes(), React.createElement(TextInput, {\n    ref: function ref(component) {\n      if (props.inputRef) {\n        props.inputRef(component);\n      }\n    },\n    style: [styles.input, {\n      color: props.textColor,\n      width: 42 * props.length\n    }],\n    autoFocus: props.autoFocus,\n    autoCorrect: false,\n    autoCapitalize: \"characters\",\n    value: inputValue,\n    blurOnSubmit: false,\n    keyboardType: keyboardType,\n    maxLength: props.length,\n    disableFullscreenUI: true,\n    clearButtonMode: \"never\",\n    spellCheck: false,\n    returnKeyType: \"go\",\n    underlineColorAndroid: \"transparent\",\n    onChangeText: function onChangeText(text) {\n      return changeText(text);\n    },\n    caretHidden: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }));\n};\nKeycodeInput.propTypes = {\n  length: PropTypes.number,\n  tintColor: PropTypes.string,\n  textColor: PropTypes.string,\n  onChange: PropTypes.func,\n  onComplete: PropTypes.func,\n  autoFocus: PropTypes.bool,\n  uppercase: PropTypes.bool,\n  alphaNumeric: PropTypes.bool,\n  numeric: PropTypes.bool,\n  value: PropTypes.string,\n  style: PropTypes.any,\n  inputRef: PropTypes.func\n};\nKeycodeInput.defaultProps = {\n  tintColor: '#007AFF',\n  textColor: '#000',\n  length: 4,\n  autoFocus: true,\n  numeric: false,\n  alphaNumeric: true,\n  uppercase: true,\n  defaultValue: ''\n};\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    position: 'relative'\n  },\n  input: {\n    height: 48,\n    position: 'absolute',\n    opacity: 0,\n    zIndex: 100\n  },\n  box: {\n    width: 32,\n    marginHorizontal: 5\n  },\n  bar: {\n    backgroundColor: '#CED5DB',\n    height: 1,\n    width: 32\n  },\n  barActive: {\n    height: 2,\n    marginTop: -0.5\n  },\n  text: {\n    fontSize: 32,\n    fontWeight: '600',\n    lineHeight: 36,\n    height: 36,\n    textAlign: 'center',\n    width: 32,\n    marginBottom: 8\n  }\n});","map":{"version":3,"sources":["D:/PROJECTS/Aadhar-Hackathon-Anumati/Anumati-client/node_modules/react-native-keycode/index.js"],"names":["React","useState","useEffect","PropTypes","KeycodeInput","props","defaultValue","inputValue","setInputValue","value","undefined","onChange","Error","changeText","uppercase","toUpperCase","alphaNumeric","replace","length","onComplete","renderBoxes","elements","i","vals","split","active","barStyles","styles","bar","barActive","backgroundColor","tintColor","push","box","text","keyboardType","numeric","Platform","OS","container","style","component","inputRef","input","color","textColor","width","autoFocus","propTypes","number","string","func","bool","any","defaultProps","StyleSheet","create","flexDirection","alignItems","position","height","opacity","zIndex","marginHorizontal","marginTop","fontSize","fontWeight","lineHeight","textAlign","marginBottom"],"mappings":"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","sourcesContent":["/**\n * React Native Keycode\n *\n * This file supports both iOS and Android.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { View, TextInput, Text, StyleSheet, Platform } from 'react-native';\nimport PropTypes from 'prop-types';\n\nexport const KeycodeInput = (props) => {\n  const [inputValue, setInputValue] = useState(props.defaultValue);\n  useEffect(() => {\n    if (props.value !== undefined && props.value !== inputValue) {\n      setInputValue(props.value);\n    }\n  }, [props.value]);\n\n  if (props.value !== undefined && !props.onChange) {\n    throw new Error(\n      'To use the KeycodeInput as a controlled component, ' +\n      'you need to supply both the value and onChange props.'\n    );\n  }\n\n  const changeText = (value) => {\n    if (props.uppercase) {\n      value = value.toUpperCase();\n    }\n    if (props.alphaNumeric) {\n      value = value.replace('/[^a-z0-9]/i', '');\n    }\n\n    setInputValue(value);\n\n    if (props.onChange) {\n      props.onChange(value);\n    }\n\n    if (value.length < props.length) {\n      return;\n    }\n\n    if (props.onComplete) {\n      props.onComplete(value);\n    }\n  };\n\n  const renderBoxes = () => {\n    let elements = [];\n    let i = 0;\n    let vals = inputValue.split('');\n    while (i < props.length) {\n      let active = i === inputValue.length;\n      let barStyles = [styles.bar, active ? [styles.barActive, { backgroundColor: props.tintColor }] : []];\n\n      elements.push(\n        <View style={styles.box} key={i}>\n          <Text style={styles.text}>{vals[i] || ''}</Text>\n          <View style={barStyles}/>\n        </View>\n      );\n\n      i++;\n    }\n\n    return elements;\n  };\n\n  let keyboardType = props.numeric ? 'numeric' : (Platform.OS === 'ios' ? 'ascii-capable' : 'default');\n\n  return (\n    <View style={[styles.container, props.style]}>\n      {renderBoxes()}\n      <TextInput\n        ref={(component) => {\n          if (props.inputRef) {\n            props.inputRef(component);\n          }\n        }}\n        style={[styles.input, { color: props.textColor, width: 42 * props.length }]}\n        autoFocus={props.autoFocus}\n        autoCorrect={false}\n        autoCapitalize='characters'\n        value={inputValue}\n        blurOnSubmit={false}\n        keyboardType={keyboardType}\n        maxLength={props.length}\n        disableFullscreenUI\n        clearButtonMode='never'\n        spellCheck={false}\n        returnKeyType='go'\n        underlineColorAndroid='transparent'\n        onChangeText={(text) => changeText(text)}\n        caretHidden/>\n    </View>\n  );\n};\n\nKeycodeInput.propTypes = {\n  length: PropTypes.number,\n  tintColor: PropTypes.string,\n  textColor: PropTypes.string,\n  onChange: PropTypes.func,\n  onComplete: PropTypes.func,\n  autoFocus: PropTypes.bool,\n  uppercase: PropTypes.bool,\n  alphaNumeric: PropTypes.bool,\n  numeric: PropTypes.bool,\n  value: PropTypes.string,\n  style: PropTypes.any,\n  inputRef: PropTypes.func\n};\n\nKeycodeInput.defaultProps = {\n  tintColor: '#007AFF',\n  textColor: '#000',\n  length: 4,\n  autoFocus: true,\n  numeric: false,\n  alphaNumeric: true,\n  uppercase: true,\n  defaultValue: ''\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    position: 'relative'\n  },\n  input: {\n    height: 48,\n    position: 'absolute',\n    opacity: 0,\n    zIndex: 100\n  },\n  box: {\n    width: 32,\n    marginHorizontal: 5\n  },\n  bar: {\n    backgroundColor: '#CED5DB',\n    height: 1,\n    width: 32\n  },\n  barActive: {\n    height: 2,\n    marginTop: -0.5\n  },\n  text: {\n    fontSize: 32,\n    fontWeight: '600',\n    lineHeight: 36,\n    height: 36,\n    textAlign: 'center',\n    width: 32,\n    marginBottom: 8\n  }\n});\n"]},"metadata":{},"sourceType":"module"}