{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\PROJECTS\\\\Aadhar-Hackathon-Anumati\\\\Anumati-client\\\\node_modules\\\\react-native-awesome-pin\\\\PinInput.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Vibration from \"react-native-web/dist/exports/Vibration\";\nimport PropTypes from \"prop-types\";\n\nvar PinInput = function (_Component) {\n  _inherits(PinInput, _Component);\n\n  var _super = _createSuper(PinInput);\n\n  function PinInput(props) {\n    var _this;\n\n    _classCallCheck(this, PinInput);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      shake: new Animated.Value(0)\n    };\n    return _this;\n  }\n\n  _createClass(PinInput, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.onRef(this);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.onRef(undefined);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var containerDefaultStyle = styles.containerDefaultStyle,\n          pinDefaultStyle = styles.pinDefaultStyle,\n          pinActiveDefaultStyle = styles.pinActiveDefaultStyle;\n      var _this$props = this.props,\n          numberOfPinsActive = _this$props.numberOfPinsActive,\n          numberOfPins = _this$props.numberOfPins,\n          containerStyle = _this$props.containerStyle,\n          pinStyle = _this$props.pinStyle,\n          pinActiveStyle = _this$props.pinActiveStyle;\n      var shake = this.state.shake;\n      var pins = [];\n\n      for (var p = 0; p < numberOfPins; p++) {\n        pins.push(React.createElement(View, {\n          key: p,\n          style: [pinDefaultStyle, pinStyle, p < numberOfPinsActive ? _objectSpread(_objectSpread({}, pinActiveDefaultStyle), pinActiveStyle) : {}],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 9\n          }\n        }));\n      }\n\n      var shakeAnimation = shake.interpolate({\n        inputRange: [0, 0.2, 0.4, 0.6, 0.8, 1],\n        outputRange: [0, -20, 20, -20, 20, 0]\n      });\n      return React.createElement(Animated.View, {\n        style: [containerDefaultStyle, containerStyle, {\n          left: shakeAnimation\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 7\n        }\n      }, pins);\n    }\n  }, {\n    key: \"shake\",\n    value: function shake() {\n      var _this2 = this;\n\n      if (this.props.vibration) {\n        Vibration.vibrate(500);\n      }\n\n      this.state.shake.setValue(0);\n      Animated.spring(this.state.shake, {\n        toValue: 1\n      }).start(function () {\n        if (_this2.props.animationShakeCallback) {\n          _this2.props.animationShakeCallback();\n        }\n      });\n    }\n  }]);\n\n  return PinInput;\n}(Component);\n\nPinInput.propTypes = {\n  onRef: PropTypes.any.isRequired,\n  numberOfPins: PropTypes.number,\n  numberOfPinsActive: PropTypes.number,\n  vibration: PropTypes.bool,\n  animationShakeCallback: PropTypes.func,\n  containerStyle: PropTypes.object,\n  pinStyle: PropTypes.object,\n  pinActiveStyle: PropTypes.object\n};\nPinInput.defaultProps = {\n  numberOfPins: 5,\n  numberOfPinsActive: 0,\n  vibration: true\n};\nexport default PinInput;\nvar styles = StyleSheet.create({\n  containerDefaultStyle: {\n    flex: null,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    paddingTop: 25,\n    paddingBottom: 25\n  },\n  pinDefaultStyle: {\n    width: 18,\n    height: 18,\n    marginRight: 15,\n    marginLeft: 15,\n    borderRadius: 9,\n    opacity: 0.45,\n    backgroundColor: \"#FFF\"\n  },\n  pinActiveDefaultStyle: {\n    opacity: 1.0\n  }\n});","map":{"version":3,"sources":["D:/PROJECTS/Aadhar-Hackathon-Anumati/Anumati-client/node_modules/react-native-awesome-pin/PinInput.js"],"names":["React","Component","PropTypes","PinInput","props","state","shake","Animated","Value","onRef","undefined","containerDefaultStyle","styles","pinDefaultStyle","pinActiveDefaultStyle","numberOfPinsActive","numberOfPins","containerStyle","pinStyle","pinActiveStyle","pins","p","push","shakeAnimation","interpolate","inputRange","outputRange","left","vibration","Vibration","vibrate","setValue","spring","toValue","start","animationShakeCallback","propTypes","any","isRequired","number","bool","func","object","defaultProps","StyleSheet","create","flex","flexDirection","alignItems","paddingTop","paddingBottom","width","height","marginRight","marginLeft","borderRadius","opacity","backgroundColor"],"mappings":"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","sourcesContent":["/**\n * @author Luke Brandon Farrell\n * @description Pin Input component with shake animation\n */\n\nimport React, { Component } from \"react\";\nimport { View, Animated, StyleSheet, Vibration } from \"react-native\";\nimport PropTypes from \"prop-types\";\n\nclass PinInput extends Component {\n  /**\n   * [ Built-in React method. ]\n   *\n   * Allows us to render JSX to the screen\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      shake: new Animated.Value(0)\n    };\n  }\n\n  /**\n   * [ Built-in React method. ]\n   *\n   * Executed when the component is mounted to the screen.\n   */\n  componentDidMount() {\n    this.props.onRef(this);\n  }\n\n  /**\n   * [ Built-in React method. ]\n   *\n   * Executed when the component is unmounted from the screen\n   */\n  componentWillUnmount() {\n    this.props.onRef(undefined);\n  }\n\n  /**\n   * [ Built-in React method. ]\n   *\n   * Allows us to render JSX to the screen\n   */\n  render() {\n    /** Styles */\n    const {\n      containerDefaultStyle,\n      pinDefaultStyle,\n      pinActiveDefaultStyle\n    } = styles;\n    /** Props */\n    const {\n      numberOfPinsActive,\n      numberOfPins,\n      // Style Props\n      containerStyle,\n      pinStyle,\n      pinActiveStyle\n    } = this.props;\n    /** State */\n    const { shake } = this.state;\n\n    // Create the pins from set props\n    const pins = [];\n\n    for (let p = 0; p < numberOfPins; p++) {\n      pins.push(\n        <View\n          key={p}\n          style={[\n            pinDefaultStyle,\n            pinStyle,\n            p < numberOfPinsActive\n              ? { ...pinActiveDefaultStyle, ...pinActiveStyle }\n              : {}\n          ]}\n        />\n      );\n    }\n\n    // Create the shake animation via interpolation\n    const shakeAnimation = shake.interpolate({\n      inputRange: [0, 0.2, 0.4, 0.6, 0.8, 1],\n      outputRange: [0, -20, 20, -20, 20, 0]\n    });\n\n    return (\n      <Animated.View\n        style={[\n          containerDefaultStyle,\n          containerStyle,\n          { left: shakeAnimation }\n        ]}\n      >\n        {pins}\n      </Animated.View>\n    );\n  }\n\n  /**\n   * Shakes the pins\n   */\n  shake() {\n    // If vibration is enabled then we vibrate on error\n    if (this.props.vibration) {\n      Vibration.vibrate(500);\n    }\n\n    // Reset animation to so we can reanimate\n    this.state.shake.setValue(0);\n\n    // Animate the pins to shake\n    Animated.spring(this.state.shake, { toValue: 1 }).start(() => {\n      if (this.props.animationShakeCallback) {\n        this.props.animationShakeCallback();\n      }\n    });\n  }\n}\n\nPinInput.propTypes = {\n  onRef: PropTypes.any.isRequired,\n  numberOfPins: PropTypes.number,\n  numberOfPinsActive: PropTypes.number,\n  vibration: PropTypes.bool,\n  animationShakeCallback: PropTypes.func,\n  // Style props\n  containerStyle: PropTypes.object,\n  pinStyle: PropTypes.object,\n  pinActiveStyle: PropTypes.object\n};\n\nPinInput.defaultProps = {\n  // Number of pins to create\n  numberOfPins: 5,\n  // Active number of pins\n  numberOfPinsActive: 0,\n  // Is vibration enabled or disabled\n  vibration: true\n};\n\nexport default PinInput;\n\n/** -------------------------------------------- */\n/**             Component Styling                */\n/** -------------------------------------------- */\nconst styles = StyleSheet.create({\n  // Style for pin container. You can use the flex\n  // property to expand the pins to take up more space\n  // on the screen. The default is 0.8.\n  containerDefaultStyle: {\n    flex: null,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    paddingTop: 25,\n    paddingBottom: 25\n  },\n  pinDefaultStyle: {\n    width: 18,\n    height: 18,\n    marginRight: 15,\n    marginLeft: 15,\n    borderRadius: 9,\n    opacity: 0.45,\n    backgroundColor: \"#FFF\"\n  },\n  pinActiveDefaultStyle: {\n    opacity: 1.0\n  }\n});\n"]},"metadata":{},"sourceType":"module"}