{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\PROJECTS\\\\Aadhar-Hackathon-Anumati\\\\Anumati-client\\\\src\\\\Components\\\\PinView.js\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { CodeField, Cursor, useBlurOnFulfill, useClearByFocusCell } from 'react-native-confirmation-code-field';\nvar styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    padding: 20\n  },\n  title: {\n    textAlign: 'center',\n    fontSize: 30\n  },\n  codeFieldRoot: {\n    marginTop: 20\n  },\n  cell: {\n    width: 40,\n    height: 40,\n    lineHeight: 38,\n    fontSize: 24,\n    borderWidth: 2,\n    borderColor: '#00000030',\n    textAlign: 'center'\n  },\n  focusCell: {\n    borderColor: '#000'\n  }\n});\nvar CELL_COUNT = 4;\n\nfunction PinView() {\n  var _this = this;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var ref = useBlurOnFulfill({\n    value: value,\n    cellCount: CELL_COUNT\n  });\n\n  var _useClearByFocusCell = useClearByFocusCell({\n    value: value,\n    setValue: setValue\n  }),\n      _useClearByFocusCell2 = _slicedToArray(_useClearByFocusCell, 2),\n      props = _useClearByFocusCell2[0],\n      getCellOnLayoutHandler = _useClearByFocusCell2[1];\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, React.createElement(CodeField, _extends({\n    ref: ref\n  }, props, {\n    value: value,\n    onChangeText: setValue,\n    cellCount: CELL_COUNT,\n    rootStyle: styles.codeFieldRoot,\n    keyboardType: \"number-pad\",\n    textContentType: \"oneTimeCode\",\n    renderCell: function renderCell(_ref) {\n      var index = _ref.index,\n          symbol = _ref.symbol,\n          isFocused = _ref.isFocused;\n      return React.createElement(Text, {\n        key: index,\n        style: [styles.cell, isFocused && styles.focusCell],\n        onLayout: getCellOnLayoutHandler(index),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }\n      }, symbol || (isFocused ? React.createElement(Cursor, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 45\n        }\n      }) : null));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  })));\n}\n\nexport default PinView;","map":{"version":3,"sources":["D:/PROJECTS/Aadhar-Hackathon-Anumati/Anumati-client/src/Components/PinView.js"],"names":["React","useState","CodeField","Cursor","useBlurOnFulfill","useClearByFocusCell","styles","StyleSheet","create","root","flex","padding","title","textAlign","fontSize","codeFieldRoot","marginTop","cell","width","height","lineHeight","borderWidth","borderColor","focusCell","CELL_COUNT","PinView","value","setValue","ref","cellCount","props","getCellOnLayoutHandler","index","symbol","isFocused"],"mappings":";;;AAAA,OAAOA,KAAP,IAAiBC,QAAjB,QAAiC,OAAjC;;;;AAGA,SACIC,SADJ,EAEIC,MAFJ,EAGIC,gBAHJ,EAIIC,mBAJJ,QAKO,sCALP;AAOA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC7BC,EAAAA,IAAI,EAAE;AAACC,IAAAA,IAAI,EAAE,CAAP;AAAUC,IAAAA,OAAO,EAAE;AAAnB,GADuB;AAE7BC,EAAAA,KAAK,EAAE;AAACC,IAAAA,SAAS,EAAE,QAAZ;AAAsBC,IAAAA,QAAQ,EAAE;AAAhC,GAFsB;AAG7BC,EAAAA,aAAa,EAAE;AAACC,IAAAA,SAAS,EAAE;AAAZ,GAHc;AAI7BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,EADH;AAEJC,IAAAA,MAAM,EAAE,EAFJ;AAGJC,IAAAA,UAAU,EAAE,EAHR;AAIJN,IAAAA,QAAQ,EAAE,EAJN;AAKJO,IAAAA,WAAW,EAAE,CALT;AAMJC,IAAAA,WAAW,EAAE,WANT;AAOJT,IAAAA,SAAS,EAAE;AAPP,GAJuB;AAa7BU,EAAAA,SAAS,EAAE;AACTD,IAAAA,WAAW,EAAE;AADJ;AAbkB,CAAlB,CAAf;AAiBA,IAAME,UAAU,GAAG,CAAnB;;AACA,SAASC,OAAT,GAAmB;AAAA;;AAEf,kBAA0BxB,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOyB,KAAP;AAAA,MAAcC,QAAd;;AACA,MAAMC,GAAG,GAAGxB,gBAAgB,CAAC;AAACsB,IAAAA,KAAK,EAALA,KAAD;AAAQG,IAAAA,SAAS,EAAEL;AAAnB,GAAD,CAA5B;;AACA,6BAAwCnB,mBAAmB,CAAC;AACxDqB,IAAAA,KAAK,EAALA,KADwD;AAExDC,IAAAA,QAAQ,EAARA;AAFwD,GAAD,CAA3D;AAAA;AAAA,MAAOG,KAAP;AAAA,MAAcC,sBAAd;;AAKA,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AACI,IAAA,GAAG,EAAEH;AADT,KAEQE,KAFR;AAGI,IAAA,KAAK,EAAEJ,KAHX;AAII,IAAA,YAAY,EAAEC,QAJlB;AAKI,IAAA,SAAS,EAAEH,UALf;AAMI,IAAA,SAAS,EAAElB,MAAM,CAACS,aANtB;AAOI,IAAA,YAAY,EAAC,YAPjB;AAQI,IAAA,eAAe,EAAC,aARpB;AASI,IAAA,UAAU,EAAE;AAAA,UAAEiB,KAAF,QAAEA,KAAF;AAAA,UAASC,MAAT,QAASA,MAAT;AAAA,UAAiBC,SAAjB,QAAiBA,SAAjB;AAAA,aACZ,oBAAC,IAAD;AACI,QAAA,GAAG,EAAEF,KADT;AAEI,QAAA,KAAK,EAAE,CAAC1B,MAAM,CAACW,IAAR,EAAciB,SAAS,IAAI5B,MAAM,CAACiB,SAAlC,CAFX;AAGI,QAAA,QAAQ,EAAEQ,sBAAsB,CAACC,KAAD,CAHpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIKC,MAAM,KAAKC,SAAS,GAAG,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAH,GAAgB,IAA9B,CAJX,CADY;AAAA,KAThB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ,CADJ;AAsBH;;AACD,eAAeT,OAAf","sourcesContent":["import React , { useState } from 'react';\r\nimport { View , Text , StyleSheet } from 'react-native';\r\n\r\nimport {\r\n    CodeField,\r\n    Cursor,\r\n    useBlurOnFulfill,\r\n    useClearByFocusCell,\r\n} from 'react-native-confirmation-code-field';\r\n\r\nconst styles = StyleSheet.create({\r\n    root: {flex: 1, padding: 20},\r\n    title: {textAlign: 'center', fontSize: 30},\r\n    codeFieldRoot: {marginTop: 20},\r\n    cell: {\r\n      width: 40,\r\n      height: 40,\r\n      lineHeight: 38,\r\n      fontSize: 24,\r\n      borderWidth: 2,\r\n      borderColor: '#00000030',\r\n      textAlign: 'center',\r\n    },\r\n    focusCell: {\r\n      borderColor: '#000',\r\n    },\r\n});\r\nconst CELL_COUNT = 4;\r\nfunction PinView() {\r\n\r\n    const [value, setValue] = useState('');\r\n    const ref = useBlurOnFulfill({value, cellCount: CELL_COUNT});\r\n    const [props, getCellOnLayoutHandler] = useClearByFocusCell({\r\n        value,\r\n        setValue,\r\n    });\r\n\r\n    return(\r\n        <View>\r\n            <CodeField\r\n                ref={ref}\r\n                {...props}\r\n                value={value}\r\n                onChangeText={setValue}\r\n                cellCount={CELL_COUNT}\r\n                rootStyle={styles.codeFieldRoot}\r\n                keyboardType=\"number-pad\"\r\n                textContentType=\"oneTimeCode\"\r\n                renderCell={({index, symbol, isFocused}) => (\r\n                <Text\r\n                    key={index}\r\n                    style={[styles.cell, isFocused && styles.focusCell]}\r\n                    onLayout={getCellOnLayoutHandler(index)}>\r\n                    {symbol || (isFocused ? <Cursor /> : null)}\r\n                </Text>\r\n                )}\r\n            />\r\n        </View>\r\n    )\r\n}\r\nexport default PinView;"]},"metadata":{},"sourceType":"module"}